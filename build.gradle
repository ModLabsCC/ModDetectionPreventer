plugins {
    id 'fabric-loom' version '1.10-SNAPSHOT'
    id 'maven-publish'
    id "com.modrinth.minotaur" version "2.8.7"
}

sourceCompatibility = JavaVersion.VERSION_21
targetCompatibility = JavaVersion.VERSION_21

version = project.mod_version

def mcVersion = project.property("minecraft_version")

repositories {
    maven {
        name = 'ModLabs Mirrors'
        url = 'https://nexus.modlabs.cc/repository/maven-mirrors/'
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    modLocalRuntime "maven.modrinth:modmenu:${project.modmenu_version}"
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", mcVersion
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand  "version": project.version,
                "minecraft_version": mcVersion
    }
}

loom {
    accessWidenerPath = file("src/main/resources/moddetectionpreventer.accesswidener");
}

def targetJavaVersion = 21
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release.set(targetJavaVersion)
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name + "+" + project.minecraft_version
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}
modrinth {
    token = System.getenv("MODRINTH_TOKEN")
    projectId = project.modrinth_id
    versionNumber = version
    versionName = "${project.getName()} ${project.mod_version}"
    versionType = isMCVersionNonRelease() ? "beta" : "release"
    changelog = "- Update to ${mcVersion}"
    uploadFile = remapJar
    gameVersions = [ mcVersion ]
    loaders = [ "fabric" ]
    dependencies {
        required.project 'fabric-api'
    }
}

boolean isMCVersionNonRelease() {
    return project.minecraft_version.matches('^\\d\\dw\\d\\d[a-z]$') || project.minecraft_version.matches('\\d+\\.\\d+-(pre|rc)(\\d+)')
}